#!/usr/bin/env bash
set -x

# For running UI apps, run:
# xhost +local:
# on the host 

DEVUP_STORE="${HOME}/.devup"
BUILD_CONTAINER="devup_build"
DIST_ID=$(cat /etc/*release|grep "^ID=" |cut -d= -f2)
DIST_VER=$(cat /etc/*release|grep "^VERSION_ID=" |sed -e 's/"//g'  |cut -d= -f2)
BASE_IMAGE="${DIST_ID}:${DIST_VER}"
USER_UID=$(id -u)
USER_NAME=$(id -un)
USER_NAME="user"


mkdir -p ${DEVUP_STORE}/home/.config

function start_build_container() {
  docker ps |grep -q "${BUILD_CONTAINER}" || {
    docker run -d --rm --name ${BUILD_CONTAINER} -v ${DEVUP_STORE}/home:/home/user ${BASE_IMAGE} bash -c "sleep infinity" 
  }

  docker exec ${BUILD_CONTAINER} bash -c "type curl &>/dev/null" || {
    docker exec ${BUILD_CONTAINER} bash -c "apt-get update && apt-get install -y curl sudo git"
  }

  docker exec ${BUILD_CONTAINER} bash -c "id -u user &>/dev/null" || {
    docker  exec ${BUILD_CONTAINER} bash -c 'cat /etc/passwd |cut -d: -f1,3,4,6 | grep  "'${USER_UID}:${USER_UID}'"| cut -d: -f4 |xargs rm -rf'
    docker  exec ${BUILD_CONTAINER} bash -c 'cat /etc/passwd |cut -d: -f1,3,4,6 | grep  "'${USER_UID}:${USER_UID}'"| cut -d: -f1 |xargs userdel'
    docker  exec ${BUILD_CONTAINER} bash -c "useradd ${USER_NAME}"
  }
}

[[ -f ${DEVUP_STORE}/home/.bashrc ]] || {
  start_build_container
  docker  exec ${BUILD_CONTAINER} bash -c "cp  /etc/skel/.* /home/user/; chown -R user:user /home/user" &>/dev/null
}

[[ -d ${DEVUP_STORE}/home/.dothome ]] || {
  start_build_container
  git clone --recursive git@github.com:cdobrescu/dothome.git ${DEVUP_STORE}/home/.dothome
}

# install nvim
[[ -f ${DEVUP_STORE}/home/.local/bin/nvim ]] || {
  mkdir -p ${DEVUP_STORE}/home/.local
  ${DEVUP_STORE}/home/.dothome/bin/bin/installers/nvim_source ${DEVUP_STORE}/home/.local
}

# install tmux
[[ -f ${DEVUP_STORE}/home/.local/bin/tmux ]] || {
  mkdir -p ${DEVUP_STORE}/home/.local
  ${DEVUP_STORE}/home/.dothome/bin/bin/installers/tmux_source ${DEVUP_STORE}/home/.local
}

# install rust
[[ -d ${DEVUP_STORE}/home/.cargo ]] || {
  start_build_container
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -c "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs |bash -s -- -y -q"
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -lc "rustup component add rust-analyzer"
}

# install sdkman & jdk 21
[[ -d ${DEVUP_STORE}/home/.sdkman ]] || {
  start_build_container
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -c "curl -s https://get.sdkman.io |bash"
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -lc "sdk install java 21.0.5-amzn"
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -lc "sdk install maven"
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -lc "sdk install gradle"
}

# install NVM
[[ -d ${DEVUP_STORE}/home/.nvm ]] || {
  start_build_container
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -c "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh |bash"
  docker exec -u ${USER_NAME} ${BUILD_CONTAINER} bash -lc "nvm install --lts"
}

# install nvim config
[[ -d ${DEVUP_STORE}/home/.config/nvim ]] || {
  git clone git@github.com:cdobrescu/nvchad-custom.git ${DEVUP_STORE}/home/.config/nvim
}

docker ps |grep -q "${BUILD_CONTAINER}" && {
  docker stop ${BUILD_CONTAINER}
}

[[ -f ${DEVUP_STORE}/Dockerfile ]] || {
  cat <<EOF > ${DEVUP_STORE}/Dockerfile
FROM ${BASE_IMAGE}

ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV PATH=/home/${USER_NAME}/.local/bin:$PATH

RUN apt update \\
    && DEBIAN_FRONTEND="noninteractive" apt-get -y install \\
    sudo curl clang git cmake unzip less libevent-core-2* \\
    ripgrep lldb \\
    ca-certificates curl gnupg \\
    xauth fluxbox x11-apps

RUN bash -c 'cat /etc/passwd |cut -d: -f1,3,4,6 | grep  "${USER_UID}:${USER_UID}"| cut -d: -f4 |xargs rm -rf || true' && \\
	  bash -c 'cat /etc/passwd |cut -d: -f1,3,4,6 | grep  "${USER_UID}:${USER_UID}"| cut -d: -f1 |xargs userdel || true' && \\
	  useradd -u 1000 -m -U -s /bin/bash ${USER_NAME} \\
    && echo "${USER_NAME} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers.d/${USER_NAME}
    # && usermod -aG docker  ${USER_NAME}

USER ${USER_NAME}

EOF

  docker build -t devup-main -f ${DEVUP_STORE}/Dockerfile ${DEVUP_STORE}
}


# Features:
# - dev-user:
#   
#   image packages:
#     sudo
#
#   image scripts:
#     add user
#     passwordless sudo
#     set env var for dev user name
# - docker in docker:
#   https://docs.docker.com/engine/install/ubuntu/#install-using-the-repository
#   images packages:
#     ca-certificates curl gnupg
#   image scripts:
#     
#     
docker inspect devup |&>/dev/null | {
docker run --rm -d \
  --name devup \
  --net host \
  -e DISPLAY=${DISPLAY} \
  -v /tmp/.X11-unix:/tmp/.X11-unix \
  -v ${DEVUP_STORE}/home:/home/user \
  -v ${HOME}/work:/home/user/workspace \
  -v ${HOME}/.ssh:/home/user/.ssh \
  -w /home/user/workspace \
  devup-main bash -c "sleep infinity"
}
