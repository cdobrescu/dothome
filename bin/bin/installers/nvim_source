#!/usr/bin/env bash

# This script builds Neovim from sources using a Docker container that's
# using an Docker image that's generated on the fly
#
# The generated Docker image is based on the same linux distro
# as the host that this script is launched in.
#
# The build is done in prefixed mode and the direcotry can be mounted
# in ~/.local
# After the script is executed you can setup up the local build by running
#
# cd ~/.dothome
# stow .bld_nvim

set -x

SRC_URL="https://github.com/neovim/neovim/archive/refs/tags/stable.tar.gz"
WORKSPACE=$(mktemp -d)
DIST_ID=$(cat /etc/*release|grep "^ID=" |cut -d= -f2)
DIST_VER=$(cat /etc/*release|grep "^VERSION_ID=" |sed -e 's/"//g'  |cut -d= -f2)
USER_UID=$(id -u)
USER_NAME=$(id -un)
NVIM_BUILD_DIR=${1:-${HOME}/.local}

[ -d ${NVIM_BUILD_DIR} ] || mkdir -p ${NVIM_BUILD_DIR}
cd ${WORKSPACE}

curl -LO ${SRC_URL}
tar -xzf *.tar.gz

cat << EOF > Dockerfile
FROM ${DIST_ID}:${DIST_VER}

RUN apt-get update && \
    DEBIAN_FRONTEND="noninteractive" apt-get install -y \
    ninja-build gettext libtool libtool-bin autoconf \
    automake cmake g++ pkg-config unzip git

RUN bash -c 'cat /etc/passwd |cut -d: -f1,3,4,6 | grep  "${USER_UID}:${USER_UID}"| cut -d: -f4 |xargs rm -rf || true' && \
	bash -c 'cat /etc/passwd |cut -d: -f1,3,4,6 | grep  "${USER_UID}:${USER_UID}"| cut -d: -f1 |xargs userdel || true' && \
	useradd -m ${USER_NAME} -s /usr/bin/bash -u ${USER_UID}
EOF

DCK_HASH=$(md5sum Dockerfile)
DCK_TAG=${DCK_HASH::8}
DCK_IMG="nvim-dev:${DCK_TAG}" 

docker image inspect ${DCK_IMG} &> /dev/null || \
    docker build --rm -t ${DCK_IMG} -f Dockerfile .

ls ${HOME}/.local &>/dev/null || mkdir -p $HOME/.local
sudo chown -R ${USER_NAME}:${USER_NAME} ${HOME/.local}

docker run -ti --rm \
	-u ${USER_NAME} \
	-v ${NVIM_BUILD_DIR}:/home/${USER_NAME}/.local \
	-v ${WORKSPACE}/neovim-stable:/home/${USER_NAME}/nvim \
	-w /home/${USER_NAME}/nvim \
	${DCK_IMG} bash -xlc \
	'make -j4 CMAKE_BUILD_TYPE=Release CMAKE_INSTALL_PREFIX=$HOME/.local install'

cd -

echo "Cleanup steps:"
echo "rm -rf ${WORKSPACE}"
echo "docker rmi ${DCK_IMG}"

